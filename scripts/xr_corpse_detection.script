----------------------------------------------------------------------------------------------------------------------
--'	Схема обыска трупов
--'	автор: Диденко Руслан (Stohe)
--'	TODO:
----------------------------------------------------------------------------------------------------------------------
local ini = ini_file("ai_tweaks\\xr_corpse_detection.ltx")
local AlwaysDetectDistance = alun_utils.read_from_ini(ini,"settings","always_detect_dist","float",700)
local StateWalk	 = alun_utils.read_from_ini(ini,"settings","state_walk","string","walk_noweap")
local StateRun	 = alun_utils.read_from_ini(ini,"settings","state_run","string","rush")
lootable_table = alun_utils.collect_section(ini,"lootable",true)
ini = nil

local HasValuableLoot = {}
function on_item_take(npc,item)
	if (lootable_table[item:section()]) then
		HasValuableLoot[npc:id()] = true
		return
	end
end

function on_item_drop(npc,item)
	local se_item = alife():object(item:id())
	if (se_item and se_item.parent_id == db.actor:id()) then
		local corpse_contain_any_valuable
		HasValuableLoot[npc:id()] = nil
		local function check_item(npc,item)
			if (lootable_table[item:section()]) then
				corpse_contain_any_valuable = true
			end
		end

		npc:iterate_inventory(check_item,npc)

		if (corpse_contain_any_valuable) then
			HasValuableLoot[npc:id()] = true
		end
	end
end
----------------------------------------------------------------------------------------------------------------------
-- EVALUATORS
----------------------------------------------------------------------------------------------------------------------
class "evaluator_corpse" (property_evaluator)
function evaluator_corpse:__init(name, storage, npc) super (nil, name)
	self.a = storage
	self.a.dtimer = 0
	self.a.stage = 1
end
function evaluator_corpse:evaluate()
	if (surge_manager.is_started() == true) then
		return false
	end

	local npc = self.object
	if not npc:alive() or npc:best_enemy() or self.a.corpse_detection_enabled == false or xr_wounded.is_wounded(npc) then
		return false
	end

	if (alun_utils.get_squad_commander_action(npc) == stalker_ids.action_combat_planner) then
		return false
	end

	return this["eval_stage_"..self.a.stage](self.a,npc)
end

function eval_stage_1(st,npc)
	local tg = time_global()
	if st.dtimer > tg then
		return false
	end
	st.dtimer = tg+3500

	local corpses = release_body_manager.get_release_body_manager().release_objects_table
	local nearest_corpse_dist
	local nearest_corpse_vertex
	local nearest_corpse_position
	local corpse_id
	local corpse_pos
	local dist
	local corpse_vertex
	local id
	local corpse_npc

	for i=1,#corpses do
		id = corpses[i].id
		corpse_npc = db.storage[id] and db.storage[id].object
		if corpse_npc and HasValuableLoot[id] and IsStalker(corpse_npc) and db.storage[id].corpse_already_selected == nil then
			corpse_pos = corpse_npc:bone_position("bip01_spine")
			dist = npc:position():distance_to_sqr(corpse_pos)

			if not (nearest_corpse_dist) then
				nearest_corpse_dist = dist
			end

			if dist <= 1500 or (npc:see(corpse_npc) and dist < nearest_corpse_dist) then
				corpse_vertex = level.vertex_id(corpse_pos)
				if level.vertex_position(corpse_vertex):distance_to_sqr(corpse_pos) > 16 then
					corpse_vertex = corpse_npc:level_vertex_id()
				end
				if npc:accessible(corpse_vertex) and level.vertex_position(corpse_vertex):distance_to_sqr(corpse_pos) <= 15 then
					nearest_corpse_dist = dist
					nearest_corpse_vertex = corpse_vertex
					nearest_corpse_position = corpse_pos
					corpse_id = id
				end
			end
		end
	end
	if nearest_corpse_vertex ~= nil then
		if (st.selected_corpse_id and db.storage[st.selected_corpse_id]) then
			db.storage[st.selected_corpse_id].corpse_already_selected = nil
		end
		st.vertex_id = nearest_corpse_vertex
		st.vertex_position = nearest_corpse_position
		st.selected_corpse_id = corpse_id
		st.stage = 2
		--alun_utils.printf("%s Found lootable Corpse",npc:name())
		return true
	end
end

function eval_stage_2(st,npc)
	local corpse = db.storage[st.selected_corpse_id] and db.storage[st.selected_corpse_id].object
	if corpse and HasValuableLoot[st.selected_corpse_id] and (db.storage[st.selected_corpse_id].corpse_already_selected == nil or db.storage[st.selected_corpse_id].corpse_already_selected == npc:id()) then
		if corpse:position():distance_to_sqr(st.vertex_position) > 15 then
			st.stage = 1
			return false
		end
		return true
	else
		st.stage = 1
		return false
	end
end
----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
class "action_search_corpse" (action_base)
function action_search_corpse:__init (npc_name,action_name,storage) super (nil,action_name)
	self.a = storage
end
function action_search_corpse:initialize()
	action_base.initialize(self)
	local npc = self.object
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_path_type(game_object.level_path)
	npc:set_dest_level_vertex_id(self.a.vertex_id)

	db.storage[self.a.selected_corpse_id].corpse_already_selected = npc:id()

	self.a.dist_run = math.random(5,30)
end
function action_search_corpse:execute()
	action_base.execute(self)
	local npc = self.object

	local tg = time_global()
	if (self.a.timer and tg > self.a.timer) then
		--alun_utils.printf("%s Looting corpse due to hang time.",npc:name())
		get_all_from_corpse(npc)
		return
	end

	local dist = npc:position():distance_to(self.a.vertex_position)
	if (dist < self.a.dist_run) then
		state_mgr.set_state(self.object,"patrol")
	else
		state_mgr.set_state(self.object,"rush")
	end

	if (dist < 1.3 or npc:level_vertex_id() == self.a.vertex_id) then
		if not (self.a.timer) then
			self.a.timer = tg + 12000
		end

		if not self.sound then
			if math.random() < 0.60 then
				xr_sound.set_sound_play(npc:id(),"corpse_loot_begin")
			end
			self.sound = true
		end
		local look_pos = self.a.vertex_position
		local corpse = db.storage[self.a.selected_corpse_id] and db.storage[self.a.selected_corpse_id].object
		if corpse then
			look_pos = corpse:bone_position("bip01_spine")
		end
		state_mgr.set_state(npc,"search_corpse",nil,nil,{look_position = look_pos})
	else
		if state_mgr.get_state(npc) == "search_corpse" then
			state_mgr.set_state(npc,"rush")
			npc:set_dest_level_vertex_id(self.a.vertex_id)
		end
	end
end
function action_search_corpse:finalize()
	action_base.finalize(self)
	if db.storage[self.a.selected_corpse_id] then
		db.storage[self.a.selected_corpse_id].corpse_already_selected = nil
	end
	self.a.selected_corpse_id = nil
	self.a.dist_run = nil
	self.sound = nil
	self.a.timer = nil

	self.object:set_item(object.strap,self.object:best_weapon()) -- fix freeze

--	state_mgr.set_state(self.object,"idle",nil,nil,nil,{fast_set = true})
end

function get_all_from_corpse(npc)
	local id = npc:id()
	db.storage[id].corpse_detection.active = nil
	db.storage[id].corpse_detection.dtimer = time_global()+500
	local corpse_npc_id = db.storage[id].corpse_detection.selected_corpse_id
	local corpse_npc = db.storage[corpse_npc_id] and db.storage[corpse_npc_id].object
	if corpse_npc == nil then
		return
	end

	local items_value = 0
	local function get_item(corpse,item)
		if (lootable_table[item:section()]) then
			if (items_value < 100) then
				items_value = items_value+item:cost()*item:condition()/30
			end
			corpse:transfer_item(item,npc)
		end
	end

	corpse_npc:iterate_inventory(get_item,corpse_npc)

	if items_value >= 100 then
		xr_sound.set_sound_play(id,"corpse_loot_good")
	elseif items_value > 0 and math.random() < 0.5 then
		xr_sound.set_sound_play(id,"corpse_loot_bad")
	end
	--alun_utils.printf("%s Getting all from corpse worth %s",npc:name(),items_value)
	--printf("GET ALL FROM CORPSE value = %s",items_value)
	HasValuableLoot[corpse_npc:id()] = nil
	if (ai_tweaks) then
		ai_tweaks.npc_on_get_all_from_corpse(npc,corpse_npc)
	end
end

----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, char_ini, scheme, section, st)
	local operators	= {}
	local properties  = {}


	properties["corpse_exist"]				= xr_evaluators_id.corpse_exist
	properties["wounded"]					= xr_evaluators_id.sidor_wounded_base

	operators["search_corpse"]				= xr_actions_id.corpse_exist
	operators["state_mgr_to_idle_alife"]	= xr_actions_id.state_mgr + 2

	local manager = npc:motivation_action_manager()


	if (character_community(npc) == "zombied" or npc:section() == "actor_visual_stalker") then
		manager:add_evaluator(properties["corpse_exist"],property_evaluator_const(false))
	end

	-- Evaluators
	manager:add_evaluator (properties["corpse_exist"], 		evaluator_corpse("corpse_exist", st))

	-- Actions
	local action = action_search_corpse (npc:name(),"action_search_corpse", st)
	action:add_precondition		(world_property(stalker_ids.property_alive, true))
	action:add_precondition		(world_property(stalker_ids.property_enemy,	false))
	action:add_precondition		(world_property(stalker_ids.property_danger,false))
	action:add_precondition		(world_property(stalker_ids.property_anomaly,false))
	action:add_precondition		(world_property(stalker_ids.property_items,false))
	action:add_precondition		(world_property(properties["corpse_exist"],	true))
	action:add_precondition		(world_property(properties["wounded"], 		false))
	action:add_precondition 	(world_property(xr_evaluators_id.wounded_exist,		false))
	action:add_effect (world_property(properties["corpse_exist"], 			false))
	manager:add_action (operators["search_corpse"], action)

	action = manager:action (xr_actions_id.alife)
	action:add_precondition		(world_property(properties["corpse_exist"],		false))

	action = manager:action (operators["state_mgr_to_idle_alife"])
	action:add_precondition		(world_property(properties["corpse_exist"],		false))
end

function set_corpse_detection(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
end


function reset_corpse_detection(npc, scheme, st, section)
	st.corpse_detection.corpse_detection_enabled = utils.cfg_get_bool(st.ini, section, "corpse_detection_enabled", npc, false, true)
end

function is_under_corpse_detection(npc)
	local mgr = npc:motivation_action_manager()

	if not mgr:initialized() then
		return false
	end

	local current_action_id = mgr:current_action_id()
	return  current_action_id == xr_actions_id.corpse_exist
end
