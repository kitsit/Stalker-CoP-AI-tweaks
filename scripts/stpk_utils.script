function data_left(stpk)
	return (stpk:r_elapsed() ~= 0)
end

function read_chunk(stpk, length, c_type)
	local tab = {}
	for i = 1, length do
		if c_type == "u8" then
			tab[i] = stpk:r_u8()
		elseif c_type == "u16" then
			tab[i] = stpk:r_u16()
		elseif c_type == "u32" then
			tab[i] = stpk:r_u32()
		elseif c_type == "s32" then
			tab[i] = stpk:r_s32()
		elseif c_type == "float" then
			tab[i] = stpk:r_float()
		elseif c_type == "string" then
			tab[i] = stpk:r_stringZ()
		elseif c_type == "bool" then
			tab[i] = stpk:r_bool()
		end
	end
	return tab
end
function write_chunk(stpk, tab, c_type)
	if tab == nil then
		return
	end
	for k, v in ipairs(tab) do
		if c_type == "u8" then
			stpk:w_u8(v)
		elseif c_type == "u16" then
			stpk:w_u16(v)
		elseif c_type == "u32" then
			stpk:w_u32(v)
		elseif c_type == "s32" then
			stpk:w_s32(v)
		elseif c_type == "float" then
			stpk:w_float(v)
		elseif c_type == "string" then
			stpk:w_stringZ(v)
		elseif c_type == "bool" then
			stpk:w_bool(v)
		end
	end
end
function readvu8uN(stpk,n)
	local v = {}
	for i=1,n,1 do
		table.insert(v,stpk:r_u8())
	end
	return v
end
function writevu8uN(stpk,v)
	local len = table.getn(v)
	for i=1,len,1 do
		stpk:w_u8(v[i])
	end
end
function readvu32stringZ(stpk)
	local v = {}
	local len = stpk:r_s32()
	for i=1,len,1 do
		table.insert(v,stpk:r_stringZ())
	end
	return v
end
function writevu32stringZ(pk,v)
	if v == nil then
		v = {}
	end
	local len = #v
	pk:w_s32(len)
	for i=1,len,1 do
		pk:w_stringZ(v[i])
	end
end

-- cse_abstract_properties
function parse_cse_abstract_properties_packet(ret,stpk)
	ret.cse_abstract__unk1_u16 = stpk:r_u16()
	ret.section_name = stpk:r_stringZ()
	ret.name = stpk:r_stringZ()
	ret.s_gameid = stpk:r_u8()
	ret.s_rp = stpk:r_u8()
	ret.position = stpk:r_vec3()
	ret.direction = stpk:r_vec3()
	ret.respawn_time = stpk:r_u16()
	ret.cse_abstract__unk2_u16 = stpk:r_u16()
	ret.parent_id = stpk:r_u16()
	ret.phantom_id = stpk:r_u16()
	ret.s_flags = stpk:r_u16()
	ret.version = stpk:r_u16()
	ret.cse_abstract__unk3_u16 = stpk:r_u16()
	ret.script_version = stpk:r_u16()
	ret.unused = stpk:r_u16()
	ret.spawn_id = stpk:r_u16()
	ret.extended_size = stpk:r_u16()
	return ret
end

function fill_cse_abstract_properties_packet(ret,stpk)
	stpk:w_u16(ret.cse_abstract__unk1_u16)
	stpk:w_stringZ(ret.section_name)
	stpk:w_stringZ(ret.name)
	stpk:w_u8(ret.s_gameid)
	stpk:w_u8(ret.s_rp)
	stpk:w_vec3(ret.position)
	stpk:w_vec3(ret.direction)
	stpk:w_u16(ret.respawn_time)
	stpk:w_u16(ret.cse_abstract__unk2_u16)
	stpk:w_u16(ret.parent_id)
	stpk:w_u16(ret.phantom_id)
	stpk:w_u16(ret.s_flags)
	stpk:w_u16(ret.version)
	stpk:w_u16(ret.cse_abstract__unk3_u16)
	stpk:w_u16(ret.script_version)
	stpk:w_u16(ret.unused)
	stpk:w_u16(ret.spawn_id)
	stpk:w_u16(ret.extended_size)
end

-- cse_alife_graph_point_properties
function parse_cse_alife_graph_point_properties_packet(ret,stpk)
	ret.connection_point_name = stpk:r_stringZ()
	ret.connection_level_name = stpk:r_stringZ()
	ret.location0 = stpk:r_u8()
	ret.location1 = stpk:r_u8()
	ret.location2 = stpk:r_u8()
	ret.location3 = stpk:r_u8()
	return ret
end

function fill_cse_alife_graph_point_properties_packet(ret,stpk)
	stpk:w_stringZ(ret.connection_point_name)
	stpk:w_stringZ(ret.connection_level_name)
	stpk:w_u8(ret.location0)
	stpk:w_u8(ret.location1)
	stpk:w_u8(ret.location2)
	stpk:w_u8(ret.location3)
end

-- cse_shape_properties
function parse_cse_shape_properties_packet(ret,stpk)
	ret.shape_count = stpk:r_u8()
	for i = 1, ret.shape_count do
		ret.shape_type = stpk:r_u8()
		if (ret.shape_type == 0) then
			-- sphere
			ret.center = stpk:r_vec3()
			ret.radius = stpk:r_float()
		else
			-- box
			ret.v1 = stpk:r_vec3()
			ret.v2 = stpk:r_vec3()
			ret.v3 = stpk:r_vec3()
			ret.v4 = stpk:r_vec3()
		end
	end
	ret.restrictor_type = stpk:r_u8()
	return ret
end

function fill_cse_shape_properties_packet(ret,stpk)
	stpk:w_u8(ret.shape_count)
	for i=1,ret.shape_count do
		stpk:w_u8(ret.shape_type)
		if (ret.shape_type == 0) then
			stpk:w_vec3(ret.center)
			stpk:w_float(ret.radius)
		else
			stpk:w_vec3(ret.v1)
			stpk:w_vec3(ret.v2)
			stpk:w_vec3(ret.v3)
			stpk:w_vec3(ret.v4)
		end
	end
end

-- cse_visual_properties
function parse_cse_visual_properties_packet(ret,stpk)
	ret.visual_name = stpk:r_stringZ()
	ret.visual_flags = stpk:r_u8()
	return ret
end

function fill_cse_visual_properties_packet(ret,stpk)
	stpk:w_stringZ(ret.visual_name)
	stpk:w_u8(ret.visual_flags)
end

-- cse_motion_properties
function parse_cse_motion_properties_packet(ret,stpk)
	ret.motion_name = stpk:r_stringZ()
	return ret
end

function fill_cse_motion_properties_packet(ret,stpk)
	stpk:w_stringZ(ret.motion_name)
end

-- cse_ph_skeleton_properties
function parse_cse_ph_skeleton_properties_packet(ret,stpk)
	ret.skeleton_name = stpk:r_stringZ()
	ret.skeleton_flags = stpk:r_u8()
	ret.source_id = stpk:r_u16()
	return ret
end

function fill_cse_ph_skeleton_properties_packet(ret,stpk)
	stpk:w_stringZ(ret.skeleton_name)
	stpk:w_u8(ret.skeleton_flags)
	stpk:w_u16(ret.source_id)
end

-- cse_alife_object_properties
function parse_cse_alife_object_properties_packet(ret,stpk)
	ret.game_vertex_id = stpk:r_u16()
	ret.cse_alife_object__unk1_f32 = stpk:r_float()
	ret.cse_alife_object__unk2_u32 = stpk:r_s32()
	ret.level_vertex_id = stpk:r_s32()
	ret.object_flags = stpk:r_s32()
	ret.custom_data = stpk:r_stringZ()
	ret.story_id = stpk:r_s32()
	ret.cse_alife_object__unk3_u32 = stpk:r_s32()
	return ret
end

function fill_cse_alife_object_properties_packet(ret,stpk)
	stpk:w_u16(ret.game_vertex_id)
	stpk:w_float(ret.cse_alife_object__unk1_f32)
	stpk:w_s32(ret.cse_alife_object__unk2_u32)
	stpk:w_s32(ret.level_vertex_id)
	stpk:w_s32(ret.object_flags)
	stpk:w_stringZ(ret.custom_data)
	stpk:w_s32(ret.story_id)
	stpk:w_s32(ret.cse_alife_object__unk3_u32)
end

-- cse_alife_object_climable_properties
function parse_cse_alife_object_climable_properties_packet(ret,stpk)
	ret.game_material = stpk:r_stringZ()
	return ret
end

function fill_cse_alife_object_climable_properties_packet(ret,stpk)
	stpk:w_stringZ(ret.game_material)
end

-- cse_smart_cover_properties
function parse_cse_smart_cover_properties_packet(ret,stpk)
	ret.cse_smart_cover__unk1_sz = stpk:r_stringZ()
	ret.cse_smart_cover__unk2_f32 = stpk:r_float()
	ret.enter_min_enemy_distance = stpk:r_float()
	ret.exit_min_enemy_distance = stpk:r_float()
	ret.is_combat_cover = stpk:r_u8()
	ret.can_fire = stpk:r_u8()
end

function fill_cse_smart_cover_properties_packet(ret,stpk)
	stpk:w_stringZ(ret.cse_smart_cover__unk1_sz)
	stpk:w_float(ret.cse_smart_cover__unk2_f32)
	stpk:w_float(ret.enter_min_enemy_distance)
	stpk:w_float(ret.exit_min_enemy_distance)
	stpk:w_u8(ret.is_combat_cover)
	stpk:w_u8(ret.can_fire)
end

-- se_smart_cover_properties
function parse_se_smart_cover_properties_packet(ret,stpk)
	if (data_left(stpk)) then
		local n = stpk:r_u8()
		for i = 1, n do
			local loophole_id = stpk:r_stringZ()
			local loophole_exist = stpk:r_bool()
			if not ret.loopholes then
				ret.loopholes = {}
			end
			ret.loopholes[loophole_id] = loophole_exist
		end
	end
	return ret
end

function fill_se_smart_cover_properties_packet(ret,stpk)
	stpk:w_stringZ(ret.last_description)
	local n = 0
	for k,v in pairs (ret.loopholes) do
		n = n + 1
	end
	stpk:w_u8(n)
	for k,v in pairs (ret.loopholes) do
		stpk:w_stringZ(k)
		stpk:w_bool(v)
	end
end

-- cse_alife_object_physic_properties
function parse_cse_alife_object_physic_properties_packet(ret,stpk)
	ret.physic_type = stpk:r_s32()
	ret.mass = stpk:r_float()
	ret.fixed_bones = stpk:r_stringZ()
	return ret
end

function fill_cse_alife_object_physic_properties_packet(ret,stpk)
	stpk:w_s32(ret.physic_type)
	stpk:w_float(ret.mass)
	stpk:w_stringZ(ret.fixed_bones)
end

-- cse_alife_object_hanging_lamp_properties
function parse_cse_alife_object_hanging_lamp_properties_packet(ret,stpk)
	ret.main_color = stpk:r_s32()
	ret.main_brightness = stpk:r_float()
	ret.main_color_animator = stpk:r_stringZ()
	ret.main_range = stpk:r_float()
	ret.light_flags = stpk:r_u16()
	ret.startup_animation = stpk:r_stringZ()
	ret.lamp_fixed_bones = stpk:r_stringZ()
	ret.health = stpk:r_float()
	ret.main_virtual_size = stpk:r_float()
	ret.ambient_radius = stpk:r_float()
	ret.ambient_power = stpk:r_float()
	ret.ambient_texture = stpk:r_stringZ()
	ret.main_texture = stpk:r_stringZ()
	ret.main_bone = stpk:r_stringZ()
	ret.main_cone_angle = stpk:r_float()
	ret.glow_texture = stpk:r_stringZ()
	ret.glow_radius = stpk:r_float()
	ret.ambient_bone = stpk:r_stringZ()
	ret.cse_alife_object_hanging_lamp__unk1_f32 = stpk:r_float()
	ret.cse_alife_object_hanging_lamp__unk2_f32 = stpk:r_float()
	ret.cse_alife_object_hanging_lamp__unk3_f32 = stpk:r_float()
	return ret
end

function fill_cse_alife_object_hanging_lamp_properties_packet(ret,stpk)
	stpk:w_s32(ret.main_color)
	stpk:w_float(ret.main_brightness)
	stpk:w_stringZ(ret.main_color_animator)
	stpk:w_float(ret.main_range)
	stpk:w_u16(ret.light_flags)
	stpk:w_stringZ(ret.startup_animation)
	stpk:w_stringZ(ret.lamp_fixed_bones)
	stpk:w_float(ret.health)
	stpk:w_float(ret.main_virtual_size)
	stpk:w_float(ret.ambient_radius)
	stpk:w_float(ret.ambient_power)
	stpk:w_stringZ(ret.ambient_texture)
	stpk:w_stringZ(ret.main_texture)
	stpk:w_stringZ(ret.main_bone)
	stpk:w_float(ret.main_cone_angle)
	stpk:w_stringZ(ret.glow_texture)
	stpk:w_float(ret.glow_radius)
	stpk:w_stringZ(ret.ambient_bone)
	stpk:w_float(ret.cse_alife_object_hanging_lamp__unk1_f32)
	stpk:w_float(ret.cse_alife_object_hanging_lamp__unk2_f32)
	stpk:w_float(ret.cse_alife_object_hanging_lamp__unk3_f32)
end

-- cse_alife_inventory_box_properties
function parse_cse_alife_inventory_box_properties_packet(ret,stpk)
	ret.cse_alive_inventory_box__unk1_u8 = stpk:r_u8()
	ret.cse_alive_inventory_box__unk2_u8 = stpk:r_u8()
	ret.tip = stpk:r_stringZ()
	return ret
end

function fill_cse_alife_inventory_box_properties_packet(ret,stpk)
	stpk:w_u8(ret.cse_alive_inventory_box__unk1_u8)
	stpk:w_u8(ret.cse_alive_inventory_box__unk2_u8)
	stpk:w_stringZ(ret.tip)
end

-- cse_alife_object_breakable_properties
function parse_cse_alife_object_breakable_properties_packet(ret,stpk)
	ret.health = stpk:r_float()
	return ret
end

function fill_cse_alife_object_breakable_properties_packet(ret,stpk)
	stpk:w_float(ret.health)
end

-- cse_alife_helicopter_properties
function parse_cse_alife_helicopter_properties_packet(ret,stpk)
	ret.startup_animation = stpk:r_stringZ()
	ret.engine_sound = stpk:r_stringZ()
	return ret
end

function fill_cse_alife_helicopter_properties_packet(ret,stpk)
	stpk:w_stringZ(ret.startup_animation)
	stpk:w_stringZ(ret.engine_sound)
end

-- cse_alife_creature_abstract_properties
function parse_cse_alife_creature_abstract_properties_packet(ret,stpk)
	ret.g_team = stpk:r_u8()
	ret.g_squad = stpk:r_u8()
	ret.g_group = stpk:r_u8()
	ret.health = stpk:r_float()
	ret.dynamic_out_restrictions = read_chunk(stpk, stpk:r_s32(), "u16")
	ret.dynamic_in_restrictions = read_chunk(stpk, stpk:r_s32(), "u16")
	ret.killer_id = stpk:r_u16()
	ret.game_death_time = read_chunk(stpk, 8, "u8")
	return ret
end

function fill_cse_alife_creature_abstract_properties_packet(ret,stpk)
	stpk:w_u8(ret.g_team)
	stpk:w_u8(ret.g_squad)
	stpk:w_u8(ret.g_group)
	stpk:w_float(ret.health)

	stpk:w_s32(#ret.dynamic_out_restrictions)
	write_chunk(stpk, ret.dynamic_out_restrictions, "u16")

	stpk:w_s32(#ret.dynamic_in_restrictions)
	write_chunk(stpk, ret.dynamic_in_restrictions, "u16")

	stpk:w_u16(ret.killer_id)
	write_chunk(stpk, ret.game_death_time, "u8")
end

-- cse_alife_monster_abstract_properties
function parse_cse_alife_monster_abstract_properties_packet(ret,stpk)
	ret.base_out_restrictors = stpk:r_stringZ()
	ret.base_in_restrictors = stpk:r_stringZ()
	ret.smart_terrain_id = stpk:r_u16()
	ret.smart_terrain_task_active = stpk:r_u8()
	return ret
end

function fill_cse_alife_monster_abstract_properties_packet(ret,stpk)
	stpk:w_stringZ(ret.base_out_restrictors)
	stpk:w_stringZ(ret.base_in_restrictors)
	stpk:w_u16(ret.smart_terrain_id)
	stpk:w_u8(ret.smart_terrain_task_active)
end

-- cse_alife_trader_abstract_properties
function parse_cse_alife_trader_abstract_properties_packet(ret,stpk)
	ret.money = stpk:r_u32()
	ret.specific_character = stpk:r_stringZ()
	ret.trader_flags = stpk:r_s32()
	ret.character_profile = stpk:r_stringZ()
	ret.community_index = stpk:r_s32()
	ret.rank = stpk:r_s32()
	ret.reputation = stpk:r_s32()
	ret.character_name = stpk:r_stringZ()
	ret.cse_alife_trader_abstract__unk1_u8 = stpk:r_u8()
	ret.cse_alife_trader_abstract__unk2_u8 = stpk:r_u8()
	return ret
end

function fill_cse_alife_trader_abstract_properties_packet(ret,stpk)
	stpk:w_u32(ret.money)
	stpk:w_stringZ(ret.specific_character)
	stpk:w_s32(ret.trader_flags)
	stpk:w_stringZ(ret.character_profile)
	stpk:w_s32(ret.community_index)
	stpk:w_s32(ret.rank)
	stpk:w_s32(ret.reputation)
	stpk:w_stringZ(ret.character_name)
	stpk:w_u8(ret.cse_alife_trader_abstract__unk1_u8)
	stpk:w_u8(ret.cse_alife_trader_abstract__unk2_u8)
end

-- cse_alife_human_abstract_properties
function parse_cse_alife_human_abstract_properties_packet(ret,stpk)
	ret.equipment_preferences = read_chunk(stpk, stpk:r_s32(), "u8")
	ret.weapon_preferences = read_chunk(stpk, stpk:r_s32(), "u8")
end

function fill_cse_alife_human_abstract_properties_packet(ret,stpk)
	stpk:w_s32(#ret.equipment_preferences)
	write_chunk(stpk, ret.equipment_preferences, "u8")

	stpk:w_s32(#ret.weapon_preferences)
	write_chunk(stpk, ret.weapon_preferences, "u8")
end

-- se_stalker_properties
function parse_se_stalker_properties_packet(ret,stpk)
	if data_left(stpk) then
		ret.old_lvid = stpk:r_stringZ()
		ret.active_section = stpk:r_stringZ()
		ret.death_droped = stpk:r_bool()
	end
	return ret
end

function fill_se_stalker_properties_packet(ret,stpk)
	stpk:w_stringZ(ret.old_lvid)
	stpk:w_stringZ(ret.active_section)
	stpk:w_bool(ret.death_droped)
end

-- cse_alife_creature_actor_properties
function parse_cse_alife_creature_actor_properties_packet(ret,stpk,upd)
	if (upd) then
		ret.upd_actor_state = stpk:r_u16()
		ret.upd_actor_accel_header = stpk:r_u16()
		ret.upd_actor_accel_data = stpk:r_s32()
		ret.upd_actor_velocity_header = stpk:r_u16()
		ret.upd_actor_velocity_data = stpk:r_s32()
		ret.upd_actor_radiation = stpk:r_float()
		ret.upd_actor_weapon = stpk:r_u8()
		ret.upd_num_items = stpk:r_u16()
	else
		ret.holder_id = stpk:r_u16()
	end
	return ret
end

function fill_cse_alife_creature_actor_properties_packet(ret,stpk,upd)
	if (upd) then
		stpk:w_u16(ret.upd_actor_state)
		stpk:w_u16(ret.upd_actor_accel_header)
		stpk:w_s32(ret.upd_actor_accel_data)
		stpk:w_u16(ret.upd_actor_velocity_header)
		stpk:w_s32(ret.upd_actor_velocity_data)
		stpk:w_float(ret.upd_actor_radiation)
		stpk:w_u8(ret.upd_actor_weapon)
		stpk:w_u16(ret.upd_num_items)
	else
		stpk:w_u16(ret.holder_id)
	end
end

-- se_actor_properties
function parse_se_actor_properties_packet(ret,stpk)
	if ret.start_position_filled ~= nil then
		stpk:w_bool(ret.start_position_filled)
		stpk:w_u16(ret.se_actor_save_marker)
	end
	return ret
end

function fill_se_actor_properties_packet(ret,stpk)
	if ret.start_position_filled ~= nil then
		stpk:w_bool(ret.start_position_filled)
		stpk:w_u16(ret.se_actor_save_marker)
	end
end

-- cse_alife_monster_base_properties
function parse_cse_alife_monster_base_properties_packet(ret,stpk)
	ret.spec_object_id = stpk:r_u16()
	return ret
end

function fill_cse_alife_monster_base_properties_packet(ret,stpk)
	stpk:w_u16(ret.spec_object_id)
end

-- se_monster_properties
function parse_se_monster_properties_packet(ret,stpk)
	ret.off_level_vertex_id = stpk:r_stringZ()
	ret.active_section = stpk:r_stringZ()
	return ret
end

function fill_se_monster_properties_packet(ret,stpk)
	stpk:w_stringZ(ret.off_level_vertex_id)
	stpk:w_stringZ(ret.active_section)
end

-- cse_alife_monster_zombie_properties
function parse_cse_alife_monster_zombie_properties_packet(ret,stpk)
	ret.field_of_view = stpk:r_float()
	ret.eye_range = stpk:r_float()
	ret.minimum_speed = stpk:r_float()
	ret.maximum_speed = stpk:r_float()
	ret.attack_speed = stpk:r_float()
	ret.pursuit_distance = stpk:r_float()
	ret.home_distance = stpk:r_float()
	ret.hit_power = stpk:r_float()
	ret.hit_interval = stpk:r_u16()
	ret.distance = stpk:r_float()
	ret.maximum_angle = stpk:r_float()
end

function fill_cse_alife_monster_zombie_properties_packet(ret,stpk)
	stpk:w_float(ret.field_of_view)
	stpk:w_float(ret.eye_range)
	stpk:w_float(ret.minimum_speed)
	stpk:w_float(ret.maximum_speed)
	stpk:w_float(ret.attack_speed)
	stpk:w_float(ret.pursuit_distance)
	stpk:w_float(ret.home_distance)
	stpk:w_float(ret.hit_power)
	stpk:w_u16(ret.hit_interval)
	stpk:w_float(ret.distance)
	stpk:w_float(ret.maximum_angle)
end

-- cse_alife_space_restrictor_properties
function parse_cse_alife_space_restrictor_properties_packet(ret,stpk)
	ret.restrictor_type = stpk:r_u8()
end

function fill_cse_alife_space_restrictor_properties_packet(ret,stpk)
	stpk:w_u8(ret.restrictor_type)
end

-- se_anomaly_field_properties
function parse_se_anomaly_field_properties_packet(ret,stpk)
	ret.initialized = stpk:r_u8()
end

function fill_se_anomaly_field_properties_packet(ret,stpk)
	stpk:w_u8(ret.initialized)
end

-- se_respawn_properties
function parse_se_respawn_properties_packet(ret,stpk)
	if data_left(stpk) then
		ret.spawned_obj_count = stpk:r_u8()
		ret.spawned_obj_ids = read_chunk(stpk, ret.spawned_obj_count, "u16")
	end
end

function fill_se_respawn_properties_packet(ret,stpk)
	write_chunk(stpk, ret.spawned_obj_ids, "u16")
end

-- cse_alife_team_base_zone_properties
function parse_cse_alife_team_base_zone_properties_packet(ret,stpk)
	ret.team = stpk:r_u8()
end

function fill_cse_alife_team_base_zone_properties_packet(ret,stpk)
	stpk:w_u8(ret.team)
end

-- cse_alife_level_changer_properties
function parse_cse_alife_level_changer_properties_packet(ret,stpk)
	ret.dest_game_vertex_id = stpk:r_u16()
	ret.dest_level_vertex_id = stpk:r_s32()
	ret.dest_position = stpk:r_vec3()
	ret.dest_direction = stpk:r_vec3()
	ret.dest_level_name = stpk:r_stringZ()
	ret.dest_graph_point = stpk:r_stringZ()
	ret.silent_mode = stpk:r_u8()
	return ret
end

function fill_cse_alife_level_changer_properties_packet(ret,stpk)
	stpk:w_u8(ret.restrictor_type)
	stpk:w_u16(ret.dest_game_vertex_id)
	stpk:w_s32(ret.dest_level_vertex_id)
	stpk:w_vec3(ret.dest_position)
	stpk:w_vec3(ret.dest_direction)
	stpk:w_stringZ(ret.dest_level_name)
	stpk:w_stringZ(ret.dest_graph_point)
	stpk:w_u8(ret.silent_mode)
end

-- se_level_changer_properties
function parse_se_level_changer_properties_packet(ret,stpk)
	ret.enabled = stpk:r_bool()
	ret.hint = stpk:r_stringZ()
	ret.se_level_changer_save_marker = stpk:r_u16()
end

function fill_se_level_changer_properties_packet(ret,stpk)
	stpk:w_bool(ret.enabled)
	stpk:w_stringZ(ret.hint)
	stpk:w_u16(ret.se_level_changer_save_marker)
end

-- se_respawn_properties
function parse_se_respawn_properties_packet(ret,stpk)

end

function fill_se_respawn_properties_packet(ret,stpk)
	write_chunk(stpk, ret.spawned_obj_ids, "u16")
end

-- cse_alife_custom_zone_properties
function parse_cse_alife_custom_zone_properties_packet(ret,stpk)
	ret.max_power = stpk:r_float()
	ret.owner_id = stpk:r_s32()
	ret.enabled_time = stpk:r_s32()
	ret.disabled_time = stpk:r_s32()
	ret.start_time_shift = stpk:r_s32()
end

function fill_cse_alife_custom_zone_properties_packet(ret,stpk)
	stpk:w_float(ret.max_power)
	stpk:w_s32(ret.owner_id)
	stpk:w_s32(ret.enabled_time)
	stpk:w_s32(ret.disabled_time)
	stpk:w_s32(ret.start_time_shift)
end

-- cse_alife_anomalous_zone_properties
function parse_cse_alife_anomalous_zone_properties_packet(ret,stpk)
	ret.offline_interactive_radius = stpk:r_float()
	ret.artefact_spawn_count = stpk:r_u16()
	ret.artefact_position_offset = stpk:r_s32()
end

function fill_cse_alife_anomalous_zone_properties_packet(ret,stpk)
	stpk:w_float(ret.offline_interactive_radius)
	stpk:w_u16(ret.artefact_spawn_count)
	stpk:w_s32(ret.artefact_position_offset)
end

-- se_zone_anom_properties
function parse_se_zone_anom_properties_packet(ret,stpk)
	if data_left(stpk) then
		ret.last_spawn_time = stpk:r_u8()
		if ret.last_spawn_time == 1 then
			if data_left(stpk) then
				ret.c_time = utils.r_CTime(stpk)
			end
		end
	end
end

function fill_se_zone_anom_properties_packet(ret,stpk)
	if ret.last_spawn_time ~= nil then
		stpk:w_u8(ret.last_spawn_time)
		if ret.last_spawn_time == 1 then
			utils.w_CTime(stpk, ret.c_time)
		end
	else
		stpk:w_u8(0)
	end
end

-- cse_alife_zone_visual_properties
function parse_cse_alife_zone_visual_properties_packet(ret,stpk)
	ret.idle_animation = stpk:r_stringZ()
	ret.attack_animation = stpk:r_stringZ()
end

function fill_cse_alife_zone_visual_properties_packet(ret,stpk)
	stpk:w_stringZ(ret.idle_animation)
	stpk:w_stringZ(ret.attack_animation)
end

-- se_zone_visual_properties
function parse_se_zone_visual_properties_packet(ret,stpk)
	if data_left(stpk) then
		ret.last_spawn_time = stpk:r_u8()
		if ret.last_spawn_time == 1 then
			if data_left(stpk) then
				ret.c_time = utils.r_CTime(stpk)
			end
		end
	end
end

function fill_se_zone_visual_properties_packet(ret,stpk)
	if ret.last_spawn_time ~= nil then
		stpk:w_u8(ret.last_spawn_time)
		if ret.last_spawn_time == 1 then
			utils.w_CTime(stpk, ret.c_time)
		end
	else
		stpk:w_u8(0)
	end
end

-- cse_alife_online_offline_group_properties
function parse_cse_alife_online_offline_group_properties_packet(ret,stpk)
	ret.members_count = stpk:r_s32()
	ret.members = read_chunk(stpk, ret.members_count, "u16")
	if data_left(stpk) then
		-- sim_squad_scripted:
		ret.current_target_id = stpk:r_stringZ()
		ret.respawn_point_id = stpk:r_stringZ()
		ret.respawn_point_prop_section = stpk:r_stringZ()
		ret.smart_id = stpk:r_stringZ()
		ret.sim_squad_scripted_save_marker = stpk:r_u16()
	end
end

function fill_cse_alife_online_offline_group_properties_packet(ret,stpk)
	stpk:w_s32(ret.members_count)
	write_chunk(stpk, ret.members, "u16")

	if ret.current_target_id ~= nil then
		stpk:w_stringZ(ret.current_target_id)
		stpk:w_stringZ(ret.respawn_point_id)
		stpk:w_stringZ(ret.respawn_point_prop_section)
		stpk:w_stringZ(ret.smart_id)
		stpk:w_u16(ret.sim_squad_scripted_save_marker)
	end
end

-- cse_alife_item_properties
function parse_cse_alife_item_properties_packet(ret,stpk)
	ret.condition = stpk:r_float()
	ret.upgrades = readvu32stringZ(stpk)
end

function fill_cse_alife_item_properties_packet(ret,stpk)
	stpk:w_float(ret.condition)
	writevu32stringZ(stpk,ret.upgrades)
end

-- cse_alife_item_weapon_properties
function parse_cse_alife_item_weapon_properties_packet(ret,stpk)
	ret.ammo_current = stpk:r_u16()
	ret.ammo_elapsed = stpk:r_u16()
	ret.weapon_state = stpk:r_u8()
	ret.addon_flags = stpk:r_u8()
	ret.ammo_type = stpk:r_u8()
	ret.xz1 = stpk:r_u8()
	return ret
end

function fill_cse_alife_item_weapon_properties_packet(ret,stpk)
	stpk:w_u16(ret.ammo_current)
	stpk:w_u16(ret.ammo_elapsed)
	stpk:w_u8(ret.weapon_state)
	stpk:w_u8(ret.addon_flags)
	stpk:w_u8(ret.ammo_type)
	stpk:w_u8(ret.xz1)
	return ret
end

-- se_sim_faction_properties
function parse_se_sim_faction_properties_packet(ret,stpk)
	if data_left(stpk) then
		ret.community_player = stpk:r_bool()
		ret.start_position_filled = stpk:r_bool()
		ret.current_expansion_level = stpk:r_u8()
		ret.last_spawn_time = utils.r_CTime(stpk)

		local tmp = nil
		local num = nil

		ret.squad_target_cache_count = stpk:r_u8()
		if ret.squad_target_cache_count > 0 then
			ret.squad_target_cache = {}
			for i = 1, ret.squad_target_cache_count do
				tmp = stpk:r_stringZ()
				num = stpk:r_u16()
				ret.squad_target_cache[tmp] = num
			end
		end

		ret.random_tasks_count = stpk:r_u8()
		if ret.random_tasks_count > 0 then
			ret.random_tasks = {}
			for i = 1, ret.random_tasks_count do
				tmp = stpk:r_u16()
				num = stpk:r_u16()
				ret.random_tasks[tmp] = num
			end
		end

		ret.current_attack_quantity_count = stpk:r_u8()
		if ret.current_attack_quantity_count > 0 then
			ret.current_attack_quantity = {}
			for i = 1, ret.current_attack_quantity_count do
				tmp = stpk:r_u16()
				num = stpk:r_u8()
				ret.current_attack_quantity[tmp] = num
			end
		end

		ret.squads_count = stpk:r_u16()
		if ret.squads_count > 0 then
			ret.init_squad_queue = {}
			for i = 1, ret.squads_count do
				local squad_id = stpk:r_stringZ()
				local settings_id = stpk:r_stringZ()
				local flag = stpk:r_bool()
				-- create squad, read squad data
			end
		end

		ret.se_sim_faction_save_marker = stpk:r_u16()
	end
end

function fill_se_sim_faction_properties_packet(ret,stpk)
	if ret.community_player ~= nil then
		stpk:w_bool(ret.community_player)
		stpk:w_bool(ret.start_position_filled)
		stpk:w_u8(ret.current_expansion_level)
		utils.w_CTime(stpk, ret.last_spawn_time)

		stpk:w_u8(ret.squad_target_cache_count)
		if ret.squad_target_cache ~= nil then
			for k, v in pairs(ret.squad_target_cache) do
				stpk:w_stringZ(k)
				stpk:w_u16(v)
			end
		end

		stpk:w_u8(ret.random_tasks_count)
		if ret.random_tasks ~= nil then
			for k, v in pairs(ret.random_tasks) do
				stpk:w_u16(k)
				stpk:w_u16(v)
			end
		end

		stpk:w_u8(ret.current_attack_quantity_count)
		if ret.current_attack_quantity ~= nil then
			for k, v in pairs(ret.current_attack_quantity) do
				stpk:w_u16(k)
				stpk:w_u8(v)
			end
		end

		stpk:w_u16(ret.squads_count)
		-- save squad data
	end
end
